/*
 * tlv.c
 *
 *  Created on: Mar 5, 2018
 *      Author: winstona
 */
#include <ringbuffer.h>
#include <tlv.h>
#include "delay.h"

void tlv_initI2sPins()
{
	// Set I2S alternate function settings
	GPIO_InitTypeDef i2sPortSettings;
	GPIO_StructInit(&i2sPortSettings);
	i2sPortSettings.GPIO_Mode = GPIO_Mode_AF;
	i2sPortSettings.GPIO_Pin = SD_I2S_WS_PIN | SD_I2S_CK_PIN | SD_I2S_SD_PIN;
	GPIO_Init(SD_I2S_PORT, &i2sPortSettings);
	// Now set up the alternate function for each the pins.
	GPIO_PinAFConfig(SD_I2S_PORT, SD_I2S_WS, SD_I2S_ALT_FUNC);
	GPIO_PinAFConfig(SD_I2S_PORT, SD_I2S_CK, SD_I2S_ALT_FUNC);
	GPIO_PinAFConfig(SD_I2S_PORT, SD_I2S_SD, SD_I2S_ALT_FUNC);
}

void SD_I2S_write(RingBuffer* I2S_buffer)
{
	while(!SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE));
	SPI_I2S_SendData(SPI2, get(I2S_buffer));
}

void SD_I2S_read(SPI_TypeDef* SPIx, RingBuffer* I2S_buffer)
{
	while(!SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE));
	put(I2S_buffer, SPI_I2S_ReceiveData(SPIx));
}

void tlv_initI2cPins()
{
	GPIO_PinAFConfig(SD_I2C_PORT, SD_I2C_SCL, SD_I2C_ALT_FUNC);
	GPIO_PinAFConfig(SD_I2C_PORT, SD_I2C_SDA, SD_I2C_ALT_FUNC);
	// Set I2C alternate function settings
	GPIO_InitTypeDef i2cPortSettings;
	GPIO_StructInit(&i2cPortSettings);
	i2cPortSettings.GPIO_Pin = SD_I2C_SCL_PIN | SD_I2C_SDA_PIN;
	i2cPortSettings.GPIO_Mode = GPIO_Mode_AF;
	// I2C standard requires pull-up resistors to avoid bus contention.
	// However, external, strong 2.2 k-ohm resistors will help us out.
	i2cPortSettings.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_Init(SD_I2C_PORT, &i2cPortSettings);


}

void tlv_initResetPin()
{
	GPIO_InitTypeDef resetPortSettings;
	GPIO_StructInit(&resetPortSettings);
	resetPortSettings.GPIO_Pin = (1 << TLV_RESET_PIN);
	resetPortSettings.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_Init(SD_I2C_PORT, &resetPortSettings);

	// Initiate the DAC reset.s
	GPIO_ResetBits(TLV_RESET_PORT, 1 << TLV_RESET_PIN);
	// TODO Add some delay logic to ensure enough time for reset to work.
	delay_ms(2000);
	GPIO_SetBits(TLV_RESET_PORT, 1 << TLV_RESET_PIN);
}

void tlv_i2c_write(uint8_t address, uint8_t message)
{
	// Wait for I2C interface to become available. Probably won't be a problem,
	// but just in case.
	while (I2C_GetFlagStatus(SD_I2C_INTERFACE, I2C_FLAG_BUSY));
	I2C_GenerateSTART(SD_I2C_INTERFACE, ENABLE);
	while (!I2C_CheckEvent(SD_I2C_INTERFACE,
			I2C_EVENT_MASTER_MODE_SELECT));
	I2C_Send7bitAddress(SD_I2C_INTERFACE, TLV_I2C_ADDR, I2C_Direction_Transmitter);
	while (!I2C_CheckEvent(SD_I2C_INTERFACE,
				I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
	// Now send an address.
	I2C_SendData(SD_I2C_INTERFACE, address);
	while (!I2C_CheckEvent(SD_I2C_INTERFACE,
			I2C_EVENT_MASTER_BYTE_TRANSMITTED));
	// And finally send the actual data.
	I2C_SendData(SD_I2C_INTERFACE, message);
	while (!I2C_CheckEvent(SD_I2C_INTERFACE,
			I2C_EVENT_MASTER_BYTE_TRANSMITTED));
	// TODO Delay here, or polling?
	I2C_GenerateSTOP(SD_I2C_INTERFACE, ENABLE);
	// START doesn't need to be disabled, since the start bit generation
	// is disabled after the start bit has been successfully sent.
}

uint8_t tlv_i2c_read(uint8_t address)
{
	while (I2C_GetFlagStatus(SD_I2C_INTERFACE, I2C_FLAG_BUSY));
	I2C_GenerateSTART(SD_I2C_INTERFACE, ENABLE);
	I2C_Send7bitAddress(SD_I2C_INTERFACE, TLV_I2C_ADDR, I2C_Direction_Receiver);
	while (!I2C_CheckEvent(SD_I2C_INTERFACE,
				I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED));
	// Send an address, and wait to receive a byte back.
	I2C_SendData(SD_I2C_INTERFACE, address);
	while (!I2C_CheckEvent(SD_I2C_INTERFACE,
			I2C_EVENT_MASTER_BYTE_TRANSMITTED));
	// STOP generated after receiving next byte.
	I2C_GenerateSTOP(SD_I2C_INTERFACE, ENABLE);
	while (!I2C_CheckEvent(SD_I2C_INTERFACE, I2C_EVENT_MASTER_BYTE_RECEIVED));
	return I2C_ReceiveData(SD_I2C_INTERFACE);
}
