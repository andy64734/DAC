/*
 * tlv_dac.c
 *
 *  Created on: Mar 5, 2018
 *      Author: winstona
 */

#include "tlv_dac.h"
#include "stm32f4xx.h"
#include "stm32f4xx_i2c.h"

#define SD_I2S_ALT_FUNC 		(GPIO_AF_SPI1)
#define SD_I2C_ALT_FUNC 		(GPIO_AF_I2C1)

#define SD_I2C_INTERFACE 		I2C1
#define SD_I2S_INTERFACE 		SPI1

#define SD_I2S_WS				(4)
#define SD_I2S_CK				(5)
#define SD_I2S_SD				(6)

#define SD_I2S_WS_PIN			(GPIO_Pin_4)
#define SD_I2S_CK_PIN			(GPIO_Pin_5)
#define SD_I2S_SD_PIN			(GPIO_Pin_6)

#define SD_I2C_SCL 				(8)
#define SD_I2C_SDA				(9)

#define SD_I2C_SCL_PIN			(GPIO_Pin_8)
#define SD_I2C_SDA_PIN			(GPIO_Pin_9)

// As a note, all registers in this API will follow the convention of using an
// 8 bit value. The less 7 significant bits will indicate the page, and the
// most significant one indicates whether to use bank 0 or 1.
// Codec data-path setup register
#define TLV_DATA_PATH_REG		(0x7)
// Serial data interface control register B
#define TLV_SDI_CR_B			(0x9)

#define TLV_REG_MASK			(0x7F)

#define TLV_I2C_ADDR			(0x18) // 7 bit address

// Offsets for data paths in data path register.
#define TLV_LEFT_PATH			(0x3)
#define TLV_RIGHT_PATH			(0x1)

typedef enum {TLV_NO_IN = 0, TLV_LEFT_IN = 1,
	TLV_RIGHT_IN = 2, TLV_MONO_IN = 3} _TLV_INPUT;

static void _tlv_dac_initI2sPins();
static void _tlv_dac_initI2cPins();
static void _tlv_dac_initRegisters();

/**
 * Enables all required interfaces for the functioning of the
 * TLV codec chip in DAC mode. This include the I2C1 interface on
 * GPIOB, and the I2S1 interface on GPIOA.
 */
void tlv_dac_init()
{
	// Appropriate GPIO pins.
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOB, ENABLE);
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE); // I2C interface
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE); // I2S interface

	_tlv_dac_initI2sPins();
	_tlv_dac_initI2cPins();
	_tlv_dac_initRegisters();
}

/**
 * Initializes the I2S component of the system, designed for use with the codec
 * for transmission of audio data.
 */
static void _tlv_dac_initI2sPins()
{
	// Set I2S alternate function settings
	GPIO_InitTypeDef i2sPortSettings;
	GPIO_StructInit(&i2sPortSettings);
	i2sPortSettings.GPIO_Mode = GPIO_Mode_AF;
	i2sPortSettings.GPIO_Pin = SD_I2S_WS_PIN | SD_I2S_CK_PIN | SD_I2S_SD_PIN;
	GPIO_Init(GPIOA, &i2sPortSettings);
	// Now set up the alternate function.
	GPIO_PinAFConfig(GPIOA, SD_I2S_WS, SD_I2S_ALT_FUNC);
	GPIO_PinAFConfig(GPIOA, SD_I2S_CK, SD_I2S_ALT_FUNC);
	GPIO_PinAFConfig(GPIOA, SD_I2S_SD, SD_I2S_ALT_FUNC);
}

/**
 * Initializes the I2C component of the system, designed for use with the codec
 * for transmission of commands to the codec.
 */
static void _tlv_dac_initI2cPins()
{
	// Set I2C alternate function settings
	GPIO_InitTypeDef i2cPortSettings;
	GPIO_StructInit(&i2cPortSettings);
	i2cPortSettings.GPIO_Pin = SD_I2C_SCL_PIN | SD_I2C_SDA_PIN;
	i2cPortSettings.GPIO_Mode = GPIO_Mode_AF;
	// I2C standard requires pull-up resistors to avoid bus contention.
	// Thankfully, the STM32 comes to the rescue here.
	i2cPortSettings.GPIO_PuPd = GPIO_PuPd_UP;
	GPIO_Init(GPIOB, &i2cPortSettings);
	GPIO_PinAFConfig(GPIOB, SD_I2C_SCL, SD_I2C_ALT_FUNC);
	GPIO_PinAFConfig(GPIOB, SD_I2C_SDA, SD_I2C_ALT_FUNC);

	I2C_InitTypeDef i2cInterfaceSettings;
	I2C_StructInit(&i2cInterfaceSettings);
}

/**
 *
 */
static void _tlv_dac_initRegisters()
{
	tlv_dac_write_reg(TLV_DATA_PATH_REG, (TLV_LEFT_IN << TLV_LEFT_PATH)
			| (TLV_RIGHT_IN << TLV_RIGHT_PATH));
	tlv_dac_write_reg(TLV_SDI_CR_B, )

}

void tlv_dac_write_reg(uint8_t address, uint8_t message)
{
	I2C_Send7bitAddress(SD_I2C_INTERFACE, address, I2C_Direction_Transmitter);
	I2C_SendData(SD_I2C_INTERFACE, message);
}

uint8_t tlv_dac_read_reg(uint8_t address)
{
	I2C_Send7bitAddress(SD_I2C_INTERFACE, address, I2C_Direction_Receiver);
	return 0;
}
