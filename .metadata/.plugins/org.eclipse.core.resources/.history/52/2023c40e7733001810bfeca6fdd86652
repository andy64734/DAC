/*
 * tlv.c
 *
 *  Created on: Mar 5, 2018
 *      Author: winstona
 */
#include <ringbuffer.h>

#include <tlv.h>
#include "stm32f4xx.h"
#include "stm32f4xx_i2c.h"

void tlv_initI2sPins()
{
	// Set I2S alternate function settings
	GPIO_InitTypeDef i2sPortSettings;
	GPIO_StructInit(&i2sPortSettings);
	i2sPortSettings.GPIO_Mode = GPIO_Mode_AF;
	i2sPortSettings.GPIO_Pin = SD_I2S_WS_PIN | SD_I2S_CK_PIN | SD_I2S_SD_PIN;
	GPIO_Init(GPIOA, &i2sPortSettings);
	// Now set up the alternate function for each the pins.
	GPIO_PinAFConfig(GPIOA, SD_I2S_WS, SD_I2S_ALT_FUNC);
	GPIO_PinAFConfig(GPIOA, SD_I2S_CK, SD_I2S_ALT_FUNC);
	GPIO_PinAFConfig(GPIOA, SD_I2S_SD, SD_I2S_ALT_FUNC);
}

/*
 * To initialize I2S for the TLV chip, by setting the correct audio settings.
 */
static void _tlv_dac_I2S_audioSettings()
{
	I2S_InitTypeDef I2S_InitStructure;

	SPI_I2S_DeInit(SPI2);
	// Audio is recorded from two channels
	I2S_InitStructure.I2S_AudioFreq = 44100 * 2;
	I2S_InitStructure.I2S_Standard = I2S_Standard_Phillips;
	I2S_InitStructure.I2S_DataFormat = I2S_DataFormat_16b;
	I2S_InitStructure.I2S_CPOL = I2S_CPOL_High;
	I2S_InitStructure.I2S_Mode = I2S_Mode_MasterTx;
	I2S_InitStructure.I2S_MCLKOutput = I2S_MCLKOutput_Enable;
	I2S_Init(SPI1, &I2S_InitStructure);

}

/*
 *
 */
void I2S_write(RingBuffer* I2S_buffer)
{
	while(!SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE));
	SPI_I2S_SendData(SPI2, get(I2S_buffer));
}

void I2S_read(SPI_TypeDef* SPIx)
{
	while(!SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE));
	SPI_I2S_ReceiveData(SPIx);
}

void tlv_initI2cPins()
{
	// Set I2C alternate function settings
	GPIO_InitTypeDef i2cPortSettings;
	GPIO_StructInit(&i2cPortSettings);
	i2cPortSettings.GPIO_Pin = SD_I2C_SCL_PIN | SD_I2C_SDA_PIN;
	i2cPortSettings.GPIO_Mode = GPIO_Mode_AF;
	// I2C standard requires pull-up resistors to avoid bus contention.
	// However, external, strong 2.2 k-ohm resistors will help us out.
	i2cPortSettings.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_Init(GPIOB, &i2cPortSettings);
	GPIO_PinAFConfig(GPIOB, SD_I2C_SCL, SD_I2C_ALT_FUNC);
	GPIO_PinAFConfig(GPIOB, SD_I2C_SDA, SD_I2C_ALT_FUNC);

	I2C_InitTypeDef i2cInterfaceSettings;
	I2C_StructInit(&i2cInterfaceSettings);
}


void tlv_i2c_write(uint8_t address, uint8_t message)
{
	// Wait for I2C interface to become available. Probably won't be a problem,
	// but just in case.
	while (I2C_GetFlagStatus(SD_I2C_INTERFACE, I2C_FLAG_BUSY));
	I2C_GenerateSTART(SD_I2C_INTERFACE, ENABLE);
	I2C_Send7bitAddress(SD_I2C_INTERFACE, address, I2C_Direction_Transmitter);
	while (!I2C_CheckEvent(SD_I2C_INTERFACE,
				I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
	// Now send an address.
	I2C_SendData(SD_I2C_INTERFACE, address);
	while (!I2C_CheckEvent(SD_I2C_INTERFACE,
			I2C_EVENT_MASTER_BYTE_TRANSMITTED));
	// And finally send the actual data.
	I2C_SendData(SD_I2C_INTERFACE, message);
	while (!I2C_CheckEvent(SD_I2C_INTERFACE,
			I2C_EVENT_MASTER_BYTE_TRANSMITTED));
	// TODO Delay here, or polling?
	I2C_GenerateSTOP(SD_I2C_INTERFACE, ENABLE);
	// START doesn't need to be disabled, since the start bit generation
	// is disabled after the start bit has been successfully sent.
}

uint8_t tlv_i2c_read(uint8_t address)
{
	while (I2C_GetFlagStatus(SD_I2C_INTERFACE, I2C_FLAG_BUSY));
	I2C_GenerateSTART(SD_I2C_INTERFACE, ENABLE);
	I2C_Send7bitAddress(SD_I2C_INTERFACE, address, I2C_Direction_Receiver);
	while (!I2C_CheckEvent(SD_I2C_INTERFACE,
				I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED));
	// Send an address, and wait to receive a byte back.
	I2C_SendData(SD_I2C_INTERFACE, address);
	while (!I2C_CheckEvent(SD_I2C_INTERFACE,
			I2C_EVENT_MASTER_BYTE_TRANSMITTED));
	// STOP generated after receiving next byte.
	I2C_GenerateSTOP(SD_I2C_INTERFACE, ENABLE);
	while (!I2C_CheckEvent(SD_I2C_INTERFACE, I2C_EVENT_MASTER_BYTE_RECEIVED));
	return I2C_ReceiveData(SD_I2C_INTERFACE);
}
